                     Міністерство освіти і науки України

           Харківський національний університет радіоелектроніки




                       Кафедра програмної інженерії




                                    Звіт
                         до лабораторної роботи №3
                      з «Аналізу та рефакторингу коду»




Виконав:                                                       Перевірив:
ст. гр. ПЗПІ-22-9                                           ас. кафедри ПІ
Новомлинський В.І.                                         Дашенков Д.С.




                             Харків 2024
        ЛАБОРАТОРНА РОБОТА №3. РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА
   ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ
                                    СИСТЕМИ


     Мета: : Розробити бізнес-логику та функції адміністрування серверної
частини програмної системи.


Хід роботи:


1. Розробка бізнес-логіки серверної частини програмної системи

Основні функції бізнес-логіки:

  - Управління користувачами: створення, редагування, видалення та отримання
     даних користувачів. Це забезпечує адміністраторами можливість управляти
     обліковими записами користувачів.
  - Управління музеями: додавання, редагування та видалення даних про
     виставки в музеї, а також доступ до інформації про кожен об'єкт.
  - Управління експонатами: створення, редагування та видалення інформації
     про експонати, включаючи їх характеристики, історичні дані та матеріал.
  - Моніторинг стану експонатів: перевірка даних, що надходять від датчиків
     (вологість, температура, вібрація) та їх запис для аналізу в подальшому.

Для сутностей бази даних були створені функції, що забезпечують операції
створення, читання, оновлення та видалення даних:

  - Контролер Users: цей контролер відповідає за обробку даних користувачів.
     Він включає функції для реєстрації, логіну, редагування даних користувачів,
     а також для адмінських операцій (наприклад, видалення користувачів або
     зміна їхнього статусу).
  - Контролер Exhibits: цей контролер забезпечує управління даними про
     експонати. Функції включають створення нових експонатів, оновлення
     інформації, пошук за певними критеріями (наприклад, за матеріалом чи
     датою створення) та видалення експонатів.


  - Контролер Sensors: цей контролер керує даними від сенсорів, що моніторять
     стан експонатів. Включає функції для збереження даних про вологість,
     температуру та вібрацію, а також для отримання історії змін цих показників.


  - Контролер Museums: відповідає за створення та редагування інформації про
     музеї, де зберігаються експонати. Можливість додавати нові музеї,
     редагувати їхні дані або видаляти музеї з бази даних.



2. Розробка функцій адміністрування серверної частини програмної системи

1) Функції адміністрування:

  - Функції редагування та видалення користувача;
  - Функції додавання, видалення, редагування клінік

2) Операції адміністрування для сутностей бази даних:

  - Контролер Users: функції для управління користувачами, включаючи
     можливість видаляти або редагувати облікові записи користувачів.
  - Контролер Exhibits: функції для адміністрування експонатами, включаючи
     можливість редагувати, додавати та видаляти експонати з бази даних.
  - Контролер Museums: дозволяє адміністраторам керувати музеями, додаючи
     нові або редагуючи існуючі.
- Контролер Sensors: надає адміністратору можливість моніторити дані
  сенсорів, а також видаляти записи або оновлювати їх.




              Рисунок 1 - UML діаграма діяльності для серверної частин
                                ДОДАТОК А
                          Фрагменти коду програми
                          Файл alert_controller.go
package controllers


import (
      "log"
      "my_project/models"
      "github.com/gofiber/fiber/v2"
      "gorm.io/gorm"
)


// CreateAlert - функція для створення сповіщення
func CreateAlert(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
              log.Println("Database connection not found in context")
              return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                    "message": "Database connection error",
              })
      }


      var alert models.Alert
      if err := c.BodyParser(&alert); err != nil {
              log.Println("BodyParser error:", err)
              return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                    "message": "Invalid request data",
              })
      }


      if err := db.Create(&alert).Error; err != nil {
              log.Println("Database save error:", err)
              return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                    "message": "Error saving alert to database",
              })
      }


      return c.Status(fiber.StatusCreated).JSON(fiber.Map{
              "message": "Alert created successfully",
            "alert":   alert,
      })
}
// GetAllAlerts - отримує всі попередження з бази даних
func GetAllAlerts(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Список попереджень
      var alerts []models.Alert


      // Отримуємо всі попередження з бази
      if err := db.Find(&alerts).Error; err != nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching alerts",
            })
      }


      // Повертаємо список попереджень
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "alerts": alerts,
      })
}
// GetAlertByID - отримує попередження за ID
func GetAlertByID(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Отримуємо ID попередження з параметрів URL
      alertID := c.Params("id")
      // Створюємо структуру для попередження
      var alert models.Alert


      // Знаходимо попередження по ID
      if err := db.First(&alert, alertID).Error; err != nil {
            if err == gorm.ErrRecordNotFound {
                  return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
                          "message": "Alert not found",
                  })
            }
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching alert",
            })
      }


      // Повертаємо знайдене попередження
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "alert": alert,
      })
}
// GetAlertsByStatus - отримує попередження за статусом
func GetAlertsByStatus(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Отримуємо параметр статусу з query string
      status := c.Query("status")
      if status == "" {
            return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                  "message": "Status query parameter is required",
            })
      }


      // Створюємо структуру для результатів
      var alerts []models.Alert


      // Виконуємо запит для отримання попереджень за статусом
      if err := db.Where("status = ?", status).Find(&alerts).Error; err != nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching alerts",
            })
      }


      // Повертаємо знайдені попередження
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "alerts": alerts,
      })
}
// GetAlertsByType - отримує попередження за типом
func GetAlertsByType(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Отримуємо параметр типу з query string
      alertType := c.Query("type")
      if alertType == "" {
            return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                  "message": "Type query parameter is required",
            })
      }


      // Створюємо структуру для результатів
      var alerts []models.Alert


      // Виконуємо запит для отримання попереджень за типом
      if err := db.Where("type = ?", alertType).Find(&alerts).Error; err != nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching alerts",
            })
      }


      // Повертаємо знайдені попередження
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "alerts": alerts,
      })
}
// GetAlertHistory - отримує історію попереджень для експонату
func GetAlertHistory(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Отримуємо параметр ID експонату або музею
      exhibitID := c.Query("exhibit_id")
      museumID := c.Query("museum_id")


      // Створюємо структуру для результатів
      var alerts []models.Alert


      // Виконуємо запит для отримання історії попереджень
      if exhibitID != "" {
            if err := db.Where("exhibit_id = ?", exhibitID).Find(&alerts).Error; err
!= nil {
                  return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                        "message": "Error fetching alert history",
                  })
            }
      } else if museumID != "" {
            if err := db.Where("museum_id = ?", museumID).Find(&alerts).Error; err
!= nil {
                  return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                        "message": "Error fetching alert history",
                  })
            }
      } else {
             return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                   "message": "Either exhibit_id or museum_id query parameter is
required",
             })
      }


      // Повертаємо історію попереджень
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
             "alert_history": alerts,
      })
}


// GetAlert - функція для отримання сповіщення за ID
func GetAlert(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
             log.Println("Database connection not found in context")
             return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                   "message": "Database connection error",
             })
      }


      alertID := c.Params("id")
      var alert models.Alert
      if err := db.First(&alert, alertID).Error; err != nil {
             log.Println("Alert not found:", err)
             return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
                   "message": "Alert not found",
             })
      }


      return c.Status(fiber.StatusOK).JSON(fiber.Map{
             "alert": alert,
      })
}


// UpdateAlert - функція для оновлення сповіщення
func UpdateAlert(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            log.Println("Database connection not found in context")
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      alertID := c.Params("id")
      var alert models.Alert
      if err := db.First(&alert, alertID).Error; err != nil {
            log.Println("Alert not found:", err)
            return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
                  "message": "Alert not found",
            })
      }


      var updatedAlert models.Alert
      if err := c.BodyParser(&updatedAlert); err != nil {
            log.Println("BodyParser error:", err)
            return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                  "message": "Invalid request data",
            })
      }


      if err := db.Save(&updatedAlert).Error; err != nil {
            log.Println("Database save error:", err)
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error updating alert",
            })
      }


      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "message": "Alert updated successfully",
            "alert":   updatedAlert,
      })
}


// DeleteAlert - функція для видалення сповіщення
func DeleteAlert(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
              log.Println("Database connection not found in context")
              return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                    "message": "Database connection error",
              })
      }


      alertID := c.Params("id")
      if err := db.Delete(&models.Alert{}, alertID).Error; err != nil {
              log.Println("Error deleting alert:", err)
              return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                    "message": "Error deleting alert",
              })
      }


      return c.Status(fiber.StatusOK).JSON(fiber.Map{
              "message": "Alert deleted successfully",
      })
}


                          Файл exhibit_controller.go
package controllers


import (
      "log"
      "my_project/models"
      "github.com/gofiber/fiber/v2"
      "gorm.io/gorm"
)


// CreateExhibit - функція для створення експоната
func CreateExhibit(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
              log.Println("Database connection not found in context")
              return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                    "message": "Database connection error",
              })
      }
      var exhibit models.Exhibit
      if err := c.BodyParser(&exhibit); err != nil {
            log.Println("BodyParser error:", err)
            return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                  "message": "Invalid request data",
            })
      }


      if err := db.Create(&exhibit).Error; err != nil {
            log.Println("Database save error:", err)
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error saving exhibit to database",
            })
      }


      return c.Status(fiber.StatusCreated).JSON(fiber.Map{
            "message": "Exhibit created successfully",
            "exhibit": exhibit,
      })
}
// GetAllExhibits - отримує всі експонати з бази даних
func GetAllExhibits(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Список експонатів
      var exhibits []models.Exhibit


      // Отримуємо всі експонати з бази
      if err := db.Find(&exhibits).Error; err != nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching exhibits",
            })
      }
      // Повертаємо список експонатів
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "exhibits": exhibits,
      })
}
// GetExhibitByID - отримує експонат за ID
func GetExhibitByID(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Отримуємо ID експонату з параметрів URL
      exhibitID := c.Params("id")


      // Створюємо структуру для експонату
      var exhibit models.Exhibit


      // Знаходимо експонат по ID
      if err := db.First(&exhibit, exhibitID).Error; err != nil {
            if err == gorm.ErrRecordNotFound {
                  return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
                        "message": "Exhibit not found",
                  })
            }
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching exhibit",
            })
      }


      // Повертаємо знайдений експонат
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "exhibit": exhibit,
      })
}
// GetExhibitStats - отримує статистику по експонатах
func GetExhibitStats(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
               return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                     "message": "Database connection error",
               })
      }


      // Запит для отримання статистики по експонатах (наприклад, кількість
попереджень)
      var stats []struct {
               ExhibitID    uint   `json:"exhibit_id"`
               ExhibitName string `json:"exhibit_name"`
               AlertCount   int    `json:"alert_count"`
      }


      // Виконуємо запит для отримання статистики
      if err := db.Table("exhibits").
               Select("exhibits.id as exhibit_id, exhibits.name as exhibit_name,
count(alerts.id) as alert_count").
               Joins("left join alerts on alerts.exhibit_id = exhibits.id").
               Group("exhibits.id").
               Scan(&stats).Error; err != nil {
               return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                     "message": "Error fetching exhibit stats",
               })
      }


      // Повертаємо статистику експонатів
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
               "exhibit_stats": stats,
      })
}
// SearchExhibits - пошук експонатів за критеріями
func SearchExhibits(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
               return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                     "message": "Database connection error",
            })
      }


      // Отримуємо параметри пошуку з query string
      name := c.Query("name")    // Назва експонату
      material := c.Query("material") // Матеріал експонату


      // Створюємо структуру для результатів пошуку
      var exhibits []models.Exhibit


      // Будуємо запит
      query := db.Model(&models.Exhibit{})


      // Додаємо умови пошуку
      if name != "" {
            query = query.Where("name LIKE ?", "%"+name+"%")
      }
      if material != "" {
            query = query.Where("material LIKE ?", "%"+material+"%")
      }


      // Виконуємо запит для отримання експонатів
      if err := query.Find(&exhibits).Error; err != nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching exhibits",
            })
      }


      // Повертаємо знайдені експонати
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "exhibits": exhibits,
      })
}
// GetExhibitsUnderMaintenance - отримує експонати, що знаходяться на технічному
обслуговуванні
func GetExhibitsUnderMaintenance(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                   "message": "Database connection error",
             })
      }


      // Створюємо структуру для результатів
      var exhibits []models.Exhibit


      // Виконуємо запит для отримання експонатів, що знаходяться на технічному
обслуговуванні
      if err := db.Where("maintenance_status = ?",
"under_maintenance").Find(&exhibits).Error; err != nil {
             return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                   "message": "Error fetching exhibits under maintenance",
             })
      }


      // Повертаємо список експонатів на технічному обслуговуванні
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
             "exhibits_under_maintenance": exhibits,
      })
}
// GetExhibitsByPriceRange - отримує експонати в певному діапазоні цін
func GetExhibitsByPriceRange(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
             return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                   "message": "Database connection error",
             })
      }


      // Отримуємо мінімальну та максимальну ціну з query параметрів
      minPrice := c.Query("min_price")
      maxPrice := c.Query("max_price")


      if minPrice == "" || maxPrice == "" {
             return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                   "message": "Both min_price and max_price query parameters are
required",
             })
      }


      // Створюємо структуру для результатів
      var exhibits []models.Exhibit


      // Виконуємо запит для отримання експонатів в певному діапазоні цін
      if err := db.Where("value BETWEEN ? AND ?", minPrice,
maxPrice).Find(&exhibits).Error; err != nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching exhibits by price range",
            })
      }


      // Повертаємо знайдені експонати
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "exhibits": exhibits,
      })
}
// GetExhibitsByMaterial - отримує експонати за матеріалом
func GetExhibitsByMaterial(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Отримуємо матеріал з query параметра
      material := c.Query("material")
      if material == "" {
            return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                  "message": "Material query parameter is required",
            })
      }


      // Створюємо структуру для результатів
      var exhibits []models.Exhibit


      // Виконуємо запит для отримання експонатів за матеріалом
      if err := db.Where("material = ?", material).Find(&exhibits).Error; err != nil
{
             return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                   "message": "Error fetching exhibits by material",
             })
      }


      // Повертаємо знайдені експонати
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
             "exhibits": exhibits,
      })
}
// GetAlertsByDateRange - отримує попередження в певному діапазоні дат
func GetAlertsByDateRange(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
             return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                   "message": "Database connection error",
             })
      }


      // Отримуємо початкову та кінцеву дату з query параметрів
      startDate := c.Query("start_date")
      endDate := c.Query("end_date")


      if startDate == "" || endDate == "" {
             return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                   "message": "Both start_date and end_date query parameters are
required",
             })
      }


      // Створюємо структуру для результатів
      var alerts []models.Alert


      // Виконуємо запит для отримання попереджень в діапазоні дат
      if err := db.Where("created_at BETWEEN ? AND ?", startDate,
endDate).Find(&alerts).Error; err != nil {
             return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching alerts by date range",
            })
      }


      // Повертаємо знайдені попередження
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "alerts": alerts,
      })
}
// GetUrgentAlerts - отримує всі термінові попередження
func GetUrgentAlerts(c *fiber.Ctx) error {
      // Отримуємо з'єднання з базою даних із контексту
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      // Створюємо структуру для результатів
      var alerts []models.Alert


      // Виконуємо запит для отримання термінових попереджень
      if err := db.Where("status = ?", "urgent").Find(&alerts).Error; err != nil {
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error fetching urgent alerts",
            })
      }


      // Повертаємо знайдені термінові попередження
      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "urgent_alerts": alerts,
      })
}


// GetExhibit - функція для отримання експоната за ID
func GetExhibit(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            log.Println("Database connection not found in context")
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      exhibitID := c.Params("id")
      var exhibit models.Exhibit
      if err := db.First(&exhibit, exhibitID).Error; err != nil {
            log.Println("Exhibit not found:", err)
            return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
                  "message": "Exhibit not found",
            })
      }


      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "exhibit": exhibit,
      })
}


// UpdateExhibit - функція для оновлення експоната
func UpdateExhibit(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            log.Println("Database connection not found in context")
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      exhibitID := c.Params("id")
      var exhibit models.Exhibit
      if err := db.First(&exhibit, exhibitID).Error; err != nil {
            log.Println("Exhibit not found:", err)
            return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
                  "message": "Exhibit not found",
            })
      }


      var updatedExhibit models.Exhibit
      if err := c.BodyParser(&updatedExhibit); err != nil {
            log.Println("BodyParser error:", err)
            return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                  "message": "Invalid request data",
            })
      }


      if err := db.Save(&updatedExhibit).Error; err != nil {
            log.Println("Database save error:", err)
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error updating exhibit",
            })
      }


      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "message": "Exhibit updated successfully",
            "exhibit": updatedExhibit,
      })
}


// DeleteExhibit - функція для видалення експоната
func DeleteExhibit(c *fiber.Ctx) error {
      db, ok := c.Locals("db").(*gorm.DB)
      if !ok || db == nil {
            log.Println("Database connection not found in context")
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Database connection error",
            })
      }


      exhibitID := c.Params("id")
      if err := db.Delete(&models.Exhibit{}, exhibitID).Error; err != nil {
            log.Println("Error deleting exhibit:", err)
            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
                  "message": "Error deleting exhibit",
            })
      }


      return c.Status(fiber.StatusOK).JSON(fiber.Map{
            "message": "Exhibit deleted successfully",
      })
}
