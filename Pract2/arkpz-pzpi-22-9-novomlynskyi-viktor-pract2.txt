Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
до практичної роботи №2
з «Аналізу та рефакторингу коду»

Виконав:

Перевірив:

ст. гр. ПЗПІ-22-9

ст. викладач кафедри ПІ

Новомлинський В.І.

Сокорчук І.П.

Харків 2024

Мета роботи: Ознайомитися з основними методами рефакторингу,
описаними у книзі Мартіна Фаулера, і виберіть три методи, які найкраще підходять
для рефакторингу вашого коду.
Обрані методи:
Replace Temp with Query; Consolidate Conditional; Expression Remove
Middle Man.
Презентацію буде наведено у вигляді додатка.
Посилання на відеозвіт в Youtube:https://youtu.be/_GxGuxPUVys
Посилання на
GitHub:https://github.com/NureNovomlynskyiViktor/arkpz-pzpi-22-9-novomlynskyi-vi
ktor/blob/main/Pract2/arkpz-pzpi-22-9-novomlynskyi-viktor-pract2.txt
Висновки: Під час практичного заняття ознайомився з основними методами
рефакторингу, які були описані в книзі Мартіна Фаулера. Описав та навів приклади
використання трьох методів.

ДОДАТОК А

МЕТОДИ РЕФАКТОРИНГУ КОДУ
ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ

Виконав: Новомлинський Віктор Ігорович,
студент групи ПЗПІ-22-9
30.11.2024

ЗМІСТ
• Титульний слайд
• Зміст
• Вступ
• Мета рефакторингу
• Replace temp with query(заміна тимчасових
змінних на запити)
• Consolidate Condition Expression(об’єднання
умовних виразів)
• Remove Middle Man(усунення посередників у
викликах методів)
• Інструменти для рефакторингу
• Висновки
• Список використаних джерел

2

ВСТУП
Що таке рефакторинг?
Рефакторинг — це процес покращення структури коду
без зміни його функціональності.

Цитата Мартіна Фаулера:
«Будь-який дурень може написати код, який може
зрозуміти комп’ютер. Хороші програмісти пишуть
код, який можуть зрозуміти люди».

Рефакторинг ≠ новий функціонал.
Це інвестиція у якість коду.
Допомагає уникнути помилок у майбутньому.

Мартін Фаулер

3

МЕТА РЕФАКТОРИНГУ
Покращення читабельності коду

- Робить код зрозумілим для інших розробників.
- Полегшує внесення змін і зменшує ймовірність
помилок.

Полегшення підтримки

Знижує витрати часу та зусиль на розуміння й
виправлення проблем.

Зменшення дублювання коду

Запобігає копіюванню функцій, що може
призвести до помилок.

Оптимізація структури

Підвищення ефективності, зменшення складності.
4

Replace temp with query
(заміна тимчасових змінних на запити)
• Що таке Replace Temp with Query?
- Це метод рефакторингу, що замінює тимчасові змінні викликом методу.
- Тимчасова змінна зазвичай містить результат обчислень, який можна
отримувати безпосередньо через запит (метод).
• Мета:
- Уникнення збереження зайвого стану в коді.
- Підвищення читабельності та скорочення повторюваного коду.
• Коли використовувати?
- Коли тимчасова змінна використовується для збереження проміжних результатів,
які можна обчислити у будь-який момент.
• Приклади проблем:
- Тимчасові змінні, які плутають розробників.
- Код із зайвими змінними важче підтримувати.

5

ПРИКЛАД

6

Consolidate Condition Expression
(об’єднання умовних виразів)
• Що таке Consolidate Conditional Expression?
- Це метод рефакторингу, який об'єднує кілька умов в одну, коли вони
призводять до однакових результатів.
• Мета:
- Покращення читабельності.
- Усунення дублювання коду.
- Полегшення внесення змін до логіки.
• Коли використовувати?
- Коли кілька умов перевіряють різні фактори, але мають однаковий результат.
- Наприклад, різні причини можуть призводити до повернення однієї і тієї ж відповіді або виконання
одного блоку коду.

• Приклади проблем:
- Код із дублюванням умов або дій, що складно розуміти та підтримувати.
- Збільшення ризику помилок під час змін у логіці.

7

ПРИКЛАД

8

Remove Middle Man
(усунення посередників у викликах методів)
• Що таке Remove Middle Man?
- Це метод рефакторингу, що полягає у видаленні "посередників" — методів, які
лише передають виклик іншому об'єкту.
• Мета:
- Спрощення взаємодії між об'єктами.
- Зменшення кількості зайвих шарів у коді.
- Покращення продуктивності та читабельності.
• Коли використовувати?
- Якщо методи класу лише делегують виклики
іншому об'єкту без додаткової логіки.
• Приклади проблем:
- Зайві методи збільшують складність класу.
- Утворюється "ланцюг викликів", що ускладнює розуміння коду.

9

ПРИКЛАД

10

ІНСТРУМЕНТИ ДЛЯ РЕФАКТОРИНГУ

11

ВИСНОВКИ
Важливість рефакторингу:
Рефакторинг підтримує читабельність і структурованість коду, що є ключовими для розробки великих проєктів.
Забезпечує зменшення технічного боргу та підвищує продуктивність команди.
Покращує продуктивність програми завдяки оптимізації складних або дублюючих конструкцій.

Полегшує впровадження нових функцій без ризику порушення існуючої функціональності.
Коли застосовувати рефакторинг:
Перед додаванням нових функцій для забезпечення зрозумілості структури.
Під час виправлення помилок, щоб уникнути плутанини та зменшити ризик повторення проблеми.
У процесі роботи з застарілим кодом, щоб адаптувати його до сучасних стандартів.
Під час огляду коду (code review) для виявлення та усунення потенційних проблем.
Як застосовувати методи рефакторингу:
Почніть із найпростішого: перейменування змінних або виділення методів.
Використовуйте автоматизовані інструменти рефакторингу для мінімізації людських помилок.
Впроваджуйте рефакторинг поетапно, перевіряючи роботу програми після кожної зміни.
Тестуйте код після змін, щоб упевнитись, що функціональність залишилась незмінною.

12

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
1. Martin Fowler, "Refactoring: Improving the Design of Existing Code".
2. Robert C. Martin, "Clean Code: A Handbook of Agile Software Craftsmanship".
3. Refactoring Guru: Catalog of Refactorings
4. Microsoft Docs: Refactoring in Visual Studio

13

ДЯКУЮ ЗА УВАГУ

14

