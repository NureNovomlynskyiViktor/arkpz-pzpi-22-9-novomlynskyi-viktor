                    Міністерство освіти і науки України

           Харківський національний університет радіоелектроніки




                      Кафедра програмної інженерії




                                   Звіт
                          до практичної роботи №1
                      з «Аналізу та рефакторингу коду»




Виконав:                                                     Перевірив:
ст. гр. ПЗПІ-22-9                                 ст. викладач кафедри ПІ
Новомлинський В.І.                                         Сокорчук І.П.




                             Харків 2024
     Мета роботи: Ознайомитися з основними рекомендаціями щодо написання,
чистого, ефективного коду та підтримуваного коду для мов ипрограмування C#, а
також навчитися аналізувати та рефакторити код для покращення його якості.

     Презентацію буде наведено у вигляді додатка.

      Висновки: Під час практичного заняття ознайомився з правилами
оформлення коду в мові програмування C#, навчився аналізувати та написав
декілька прикладів коду з покращенням його якості.
ДОДАТОК А
     ПРАВИЛА ОФОРМЛЕННЯ
      ПРОГРАМНОГО КОДУ




Виконав: Новомлинський Віктор Ігорович,
студент групи ПЗПІ-22-9
11.11.2024
                ЗМІСТ

• Титульний слайд
• Зміст
• Введення до C#
• Основні принципи оформлення коду в C#
• Форматування функцій та методів
• Форматування коду
• Оформлення файлів та структури проєкту
• Приклади коду до та після форматування
• Висновки
• Список використаних джерел




                                           2
                                 ВВЕДЕННЯ
• Історія мови C#(C-Sharp) — це сучасна об'єктно-орієнтована мова
  програмування, яка була розроблена компанією Microsoft на початку
  2000-х років. Розробкою мови керував Андерс Гейлсберг, один із
  розробників Turbo Pascal і Delphi, а його метою було створення
  мови, яка була б зручною, потужною та безпечною.
• Code Convention(правила оформлення) в C# визначають стандарти і
  правила, яких рекомендується дотримуватись при написанні коду.
  Це стосується як стилю іменування змінних, класів і методів, так і
  правил щодо розміщення пробілів, відступів, блочних структур і
  коментарів.


                                                                       3
ЗНАЧЕННЯ ПРАВИЛЬНОГО ОФОРМЛЕННЯ
              КОДУ
• Чистота коду. Правила допомагають тримати код у чистому, структурованому
  вигляді. Чистий код легше сприймається, що особливо важливо в великих
  проєктах або при роботі в команді.
• Читабельність. Дотримання стандартів полегшує розуміння коду іншим
  розробникам. Читабельний код дозволяє швидко знаходити потрібні частини та
  ефективніше вносити зміни.
• Підтримка. Код, що відповідає стандартам, легше підтримувати в
  довгостроковій перспективі. Це знижує витрати на оновлення і спрощує роботу
  над поліпшеннями.
                                                                                4
ЗАГАЛЬНІ ПРАВИЛА ОФОРМЛЕННЯ КОДУ
Основні положення:
• Імена класів та методів у C# зазвичай
записуються в стилі PascalCase.
• Імена змінних і параметрів прийнято
записувати у camelCase.
• Не використовуйте скорочень, якщо це не
загальноприйняті терміни (наприклад, int
для цілого числа, str для рядків).




                                            5
                        КОМЕНТАРІ ДО КОДУ
 Коментарі використовуються для пояснення складних ділянок коду або для надання
 додаткової інформації, яка може допомогти зрозуміти логіку. Важливо не
 перевантажувати код коментарями і не додавати їх там, де код і так зрозумілий.

 Пояснення виняткових ситуацій
 або сторонніх рішень.




Уникання надлишкових коментарів.             Пояснення складної логіки.




                                                                                  6
                   СТРУКТУРУВАННЯ КОДУ
Використання відступів та порожніх рядків для покращення читабельності.
Правильне використання відступів є важливим для чіткого візуального виділення
блоків коду. Це дозволяє швидко орієнтуватися в логічній структурі програми,
бачити початок і кінець умов, циклів та методів.




                                                                                7
   ОФОРМЛЕННЯ ФУНКЦІЙ ТА МЕТОДІВ
1. Чіткість та стислість функцій.
Функції мають виконувати одну задачу і бути простими. Якщо функція робить забагато речей, її варто
поділити на декілька маленьких.
2. Відповідність імені функції її призначенню.
Ім’я функції повинно чітко описувати, що вона робить.
3. Використання однакових шаблонів для схожих функцій.
Якщо кілька функцій виконують схожі завдання, їх можна зробити за одним шаблоном.




                                                                                                     8
                        ФОРМАТУВАННЯ КОДУ
1. Відступи (кількість пробілів або табуляцій).
Правильні відступи допомагають чітко виділити блоки коду, що робить його
зрозумілим. У C# стандартом є використання 4 пробілів для кожного рівня
відступу, а не табуляцій.

2. Правила використання круглих і фігурних дужок.

2.1 Фігурні дужки { }                     2.2 Круглі дужки ( )




                                                                           9
3. Вирівнювання операторів та виразів.
 Вирівнювання операторів.
 Оператори та рівняння вирівняні для кращої видимості.




 Вирівнювання довгих виразів.
 Якщо вирази або виклики методів мають кілька
 параметрів, вони вирівнюються для легшого сприйняття.




                                                         10
      ПРИКЛАД КОДУ ДО ТА ПІСЛЯ
  ЗАСТОСУВАННЯ ПРАВИЛ ОФОРМЛЕННЯ
1. Фрагмент неформатованого коду.


2. Той самий код після форматування з поясненням змін.
                           Пояснення змін:
                           1.Відступи:
                                 1. Відступи для кожного рівня блоку коду були приведені до стандарту 4 пробілів.
                                 2. Це робить код більш структурованим і зрозумілим, оскільки чітко видно, які блоки
                                     коду належать до яких умов або методів.
                           2.Фігурні дужки:
                                 1. Фігурні дужки перенесені на новий рядок, що є стандартом у C# для кращої
                                     читабельності.
                           3.Круглі дужки:
                                 1. В коді немає пробілів між параметрами функцій і круглими дужками, що відповідає
                                     стандартам оформлення.
                           4.Вирівнювання:
                                 1. Операції, такі як присвоєння значення змінним, були вирівняні, щоб не було
                                     "загублених" елементів коду, що ускладнюють читання.
                                 2. Всі блоки коду мають правильні відступи і легко зчитуються.
                           5.Порожні рядки:                                                                 11
                                 1. Було додано порожні рядки між логічними блоками, щоб розділити ініціалізацію
                                     змінних і умови перевірки, а також для кращого сприйняття коду.
   ОФОРМЛЕННЯ ФАЙЛІВ ТА СТРУКТУРА
             ПРОЄКТУ
1. Іменування файлів.
Іменування файлів має бути послідовним, чітким і описовим. Це допомагає
зрозуміти, що знаходиться в кожному файлі, навіть без відкриття самого файлу.
                Правильне іменування:
                Клас MainForm має файл з ім’ям MainForm.cs
                Неправильне іменування:
                Файл з класом MainForm буде мати ім’я mainform.cs




                                                                         12
                         ВИСНОВКИ
Основні принципи, які потрібно використовувати для покращення коду:


                            Коментарі та            Модульність та
 Читабельність коду
                            документація            організація




 Чіткість і стислість   Структура директорій    Стандарти та конвенції
 функцій                та іменування




                                                                         13
  СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

1. "Clean Code: A Handbook of Agile Software Craftsmanship" by Robert C. Martin
Книга, яка пояснює принципи чистого коду, структурування та оформлення, а також дає
поради для покращення читабельності та підтримуваності коду.

2. "C# Coding Conventions" – Microsoft Docs
Офіційна документація Microsoft, що описує основні принципи стилю коду в C#. Доступна
онлайн на Microsoft Docs (англійською мовою).




                                                                                      14
ДЯКУЮ ЗА УВАГУ




                 15
